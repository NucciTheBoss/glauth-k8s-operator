debug = false
structuredlog = true

[ldap]
  enabled = true
  listen = "0.0.0.0:3893"
  tls = {{ starttls.enabled|tojson }}
  tlsKeyPath = "{{ starttls.tls_key|default("/etc/ssl/private/glauth.key", true) }}"
  tlsCertPath = "{{ starttls.tls_cert|default("/usr/local/share/ca-certificates/glauth.crt", true) }}"

[ldaps]
  enabled = {{ ldaps.enabled|tojson }}
  listen = "0.0.0.0:3894"
  key = "{{ starttls.tls_key|default("/etc/ssl/private/glauth.key", true) }}"
  cert = "{{ starttls.tls_cert|default("/usr/local/share/ca-certificates/glauth.crt", true) }}"
  

{% if ldap_server %}
[[backends]]
  datastore = "ldap"
  servers = {{ ldap_server.ldap_server.urls | list }}
{% endif %}

{%- if database %}
[[backends]]
  datastore = "plugin"
  plugin = "/bin/postgres.so"
  pluginhandler = "NewPostgresHandler"
  baseDN = "{{ base_dn }}"
  database = "postgres://{{ database.get('username') }}:{{ database.get('password') }}@{{ database.get('endpoint') }}/{{ database.get('database') }}?sslmode=disable"
  anonymousdse = {{ "true" if anonymousdse_enabled else "false" }}
{% endif %}

[behaviors]
  # Ignore all capabilities restrictions, for instance allowing every user to perform a search
  IgnoreCapabilities = false
  # Enable a "fail2ban" type backoff mechanism temporarily banning repeated failed login attempts
  LimitFailedBinds = true
  # How many failed login attempts are allowed before a ban is imposed
  NumberOfFailedBinds = 3
  # How long (in seconds) is the window for failed login attempts
  PeriodOfFailedBinds = 10
  # How long (in seconds) is the ban duration
  BlockFailedBindsFor = 60
  # Clean learnt IP addresses every N seconds
  PruneSourceTableEvery = 600
  # Clean learnt IP addresses not seen in N seconds
  PruneSourcesOlderThan = 600

#################
# Enable and configure the optional REST API here.
[api]
  enabled = false
